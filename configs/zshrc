# ~/.zshrc - Configura√ß√£o personalizada do ZSH
# Autor: Bruno Hiago
# Vers√£o: 1.0

# ================================================
# Oh My Zsh Configuration
# ================================================

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme
ZSH_THEME=""  # Usamos Starship como prompt

# Plugins
plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
    zsh-completions
    docker
    docker-compose
    npm
    node
    python
    pip
    vscode
    sublime
    colored-man-pages
    command-not-found
    history-substring-search
    extract
    z
    fzf
    nvm
)

# Oh My Zsh source
source $ZSH/oh-my-zsh.sh

# ================================================
# Environment Variables
# ================================================

# Editor
export EDITOR='code'
export VISUAL='code'

# Language
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# History
export HISTSIZE=10000
export SAVEHIST=10000
export HISTFILE=~/.zsh_history
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE

# Completion settings
setopt COMPLETE_ALIASES
setopt AUTO_LIST
setopt AUTO_MENU
setopt AUTO_PARAM_SLASH
setopt FLOW_CONTROL

# Directory navigation
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT

# ================================================
# Path Configuration
# ================================================

# User binaries
export PATH="$HOME/.local/bin:$PATH"

# Node.js (NVM)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Python
export PATH="$HOME/.local/bin:$PATH"

# Cargo (Rust)
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Go
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

# ================================================
# Aliases - General
# ================================================

# Navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'
alias -- -='cd -'

# List files
alias ls='eza --icons --group-directories-first'
alias ll='eza -l --icons --group-directories-first --time-style=long-iso'
alias la='eza -la --icons --group-directories-first --time-style=long-iso'
alias lt='eza --tree --icons --group-directories-first'
alias l='eza -F --icons --group-directories-first'

# Backup for ls if eza not available
if ! command -v eza &> /dev/null; then
    alias ls='ls --color=auto --group-directories-first'
    alias ll='ls -lh'
    alias la='ls -lah'
    alias l='ls -CF'
fi

# File operations
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias mkdir='mkdir -pv'

# Text viewing
alias cat='bat --style=auto'
alias less='bat --style=auto --paging=always'

# Backup for cat if bat not available
if ! command -v bat &> /dev/null; then
    alias cat='cat'
fi

# Find and search
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias fd='fd --hidden --follow'

# Disk usage
alias du='du -h'
alias df='df -h'
alias free='free -h'

# Network
alias ping='ping -c 5'
alias wget='wget -c'

# Process management
alias ps='ps aux'
alias htop='htop'
alias top='htop'

# System info
alias sysinfo='neofetch'
alias weather='curl wttr.in'

# ================================================
# Aliases - Development
# ================================================

# Git
alias g='git'
alias ga='git add'
alias gaa='git add .'
alias gc='git commit'
alias gcm='git commit -m'
alias gca='git commit -am'
alias gp='git push'
alias gpl='git pull'
alias gs='git status'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gl='git log --oneline --graph --decorate'
alias gll='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit'

# Docker
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias dpa='docker ps -a'
alias di='docker images'
alias drm='docker rm'
alias drmi='docker rmi'
alias dstop='docker stop $(docker ps -q)'
alias dclean='docker system prune -af'

# Node.js/NPM
alias n='npm'
alias ni='npm install'
alias nid='npm install --save-dev'
alias nig='npm install -g'
alias nr='npm run'
alias ns='npm start'
alias nt='npm test'
alias nb='npm run build'
alias nln='npm link'
alias nls='npm list'

# Python
alias py='python3'
alias pip='pip3'
alias venv='python3 -m venv'
alias activate='source venv/bin/activate'

# Code editors
alias c='code'
alias c.='code .'
alias s='subl'
alias s.='subl .'
alias v='vim'
alias n='nano'

# Quick edit configs
alias zshrc='code ~/.zshrc'
alias vimrc='code ~/.vimrc'
alias gitconfig='code ~/.gitconfig'

# ================================================
# Aliases - WSL Specific
# ================================================

if grep -qi microsoft /proc/version; then
    # Windows integration
    alias explorer='explorer.exe'
    alias notepad='notepad.exe'
    alias winget='winget.exe'
    
    # Open current directory in Windows Explorer
    alias open='explorer.exe .'
    
    # Copy to Windows clipboard
    alias clip='clip.exe'
    
    # WSL utilities
    alias wsl-restart='wsl.exe --shutdown'
    alias wsl-update='wsl.exe --update'
fi

# ================================================
# Functions
# ================================================

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive formats
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"   ;;
            *.tar.gz)    tar xzf "$1"   ;;
            *.tar.xz)    tar xJf "$1"   ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find file in current directory
ff() {
    find . -name "*$1*" -type f
}

# Find directory in current directory
fd() {
    find . -name "*$1*" -type d
}

# Git clone and cd
gclone() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Quick server
serve() {
    local port="${1:-8000}"
    python3 -m http.server "$port"
}

# Weather for specific city
weather() {
    local city="${1:-$(curl -s ipinfo.io/city)}"
    curl -s "wttr.in/$city"
}

# System update (Ubuntu/Debian)
update() {
    sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
}

# Show disk usage of directories
usage() {
    du -h --max-depth=1 | sort -hr
}

# Kill process by name
killp() {
    ps aux | grep "$1" | grep -v grep | awk '{print $2}' | xargs kill -9
}

# ================================================
# Tool Initializations
# ================================================

# Starship prompt
eval "$(starship init zsh)"

# Zoxide (better cd)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
    alias cd='z'
fi

# FZF (fuzzy finder)
if command -v fzf &> /dev/null; then
    source <(fzf --zsh)
    
    # FZF options
    export FZF_DEFAULT_OPTS="
        --layout=reverse
        --info=inline
        --height=80%
        --multi
        --preview-window=:hidden
        --preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'
        --bind='f3:execute(bat --style=numbers {} || less -f {}),f2:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {} | clip)'
    "
    
    # Use fd for FZF if available
    if command -v fd &> /dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
    fi
fi

# Thefuck (command correction)
if command -v thefuck &> /dev/null; then
    eval $(thefuck --alias)
fi

# ================================================
# Custom Completions
# ================================================

# Docker completion
if command -v docker &> /dev/null; then
    fpath+=(~/.docker/completions)
fi

# Load completions
autoload -Uz compinit
compinit

# ================================================
# Welcome Message
# ================================================

# Show system info on new terminal (optional)
if command -v neofetch &> /dev/null; then
    neofetch --ascii_distro ubuntu_small
elif command -v screenfetch &> /dev/null; then
    screenfetch
fi

# Show git status if in git repository
if git rev-parse --git-dir > /dev/null 2>&1; then
    echo "üìÅ Git Repository Status:"
    git status --short
    echo
fi

# ================================================
# Performance Optimizations
# ================================================

# Disable flow control (Ctrl+S/Ctrl+Q)
stty -ixon

# Faster autocompletion
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Menu completion
zstyle ':completion:*' menu select

# ================================================
# Final Setup
# ================================================

# Source local customizations if they exist
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# Add any machine-specific configurations above this line
echo "üöÄ ZSH configurado e pronto para uso!"