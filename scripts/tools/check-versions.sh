#!/bin/bash

# Configura√ß√µes de seguran√ßa e tratamento de erros
set -euo pipefail

# =============================================================================
# check-versions.sh - Verificar vers√µes das ferramentas instaladas
# Autor: Bruno Hiago
# Vers√£o: 1.0 - Verifica√ß√£o de vers√µes atualizadas
# =============================================================================

# Carregar sistema core
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if ! source "$SCRIPT_DIR/../core/bootstrap.sh"; then
    printf "\033[0;31m‚ùå ERRO CR√çTICO: Falha ao carregar sistema core\033[0m\n" >&2
    exit 1
fi

# =============================================================================
# FUN√á√ïES DE VERIFICA√á√ÉO DE VERS√ÉO
# =============================================================================

# Verificar vers√£o do Git
check_git_version() {
    if command_exists git; then
        local current=$(git --version | cut -d' ' -f3)
        local latest=$(curl -s https://api.github.com/repos/git/git/releases/latest | grep -o '"tag_name": "v[^"]*"' | cut -d'"' -f4 | tr -d 'v')
        
        print_info "üîß Git: $current (√öltima: ${latest:-unknown})"
        
        if [[ "$current" < "$latest" ]] 2>/dev/null; then
            print_warning "‚ö†Ô∏è  Git pode ser atualizado"
        fi
    else
        print_error "‚ùå Git n√£o instalado"
    fi
}

# Verificar vers√£o do Node.js
check_node_version() {
    if command_exists node; then
        local current=$(node --version | tr -d 'v')
        local latest_lts=$(curl -s https://nodejs.org/dist/index.json | jq -r '[.[] | select(.lts != false)][0].version' | tr -d 'v')
        
        print_info "üü¢ Node.js: $current (LTS: ${latest_lts:-unknown})"
    else
        print_info "‚ö™ Node.js n√£o instalado"
    fi
}

# Verificar vers√£o do Docker
check_docker_version() {
    if command_exists docker; then
        local current=$(docker --version | cut -d' ' -f3 | tr -d ',')
        print_info "üê≥ Docker: $current"
    else
        print_info "‚ö™ Docker n√£o instalado"
    fi
}

# Verificar vers√£o do VS Code
check_vscode_version() {
    if command_exists code; then
        local current=$(code --version | head -1)
        print_info "üíª VS Code: $current"
    else
        print_info "‚ö™ VS Code n√£o instalado"
    fi
}

# Verificar ferramentas modernas
check_modern_tools() {
    local tools=("bat" "eza" "fzf" "zoxide" "starship")
    
    for tool in "${tools[@]}"; do
        if command_exists "$tool"; then
            local version_output=""
            case "$tool" in
                "bat")
                    version_output=$(bat --version 2>/dev/null | head -1 | cut -d' ' -f2)
                    ;;
                "eza")
                    version_output=$(eza --version 2>/dev/null | head -1 | cut -d' ' -f2)
                    ;;
                "fzf")
                    version_output=$(fzf --version 2>/dev/null | cut -d' ' -f1)
                    ;;
                "zoxide")
                    version_output=$(zoxide --version 2>/dev/null | cut -d' ' -f2)
                    ;;
                "starship")
                    version_output=$(starship --version 2>/dev/null | cut -d' ' -f2)
                    ;;
            esac
            
            print_info "‚ú® $tool: ${version_output:-unknown}"
        else
            print_warning "‚ö™ $tool n√£o instalado"
        fi
    done
}

# Verificar ZSH e Oh My Zsh
check_shell_tools() {
    if command_exists zsh; then
        local zsh_version=$(zsh --version | cut -d' ' -f2)
        print_info "üêö ZSH: $zsh_version"
        
        if [[ -d "$HOME/.oh-my-zsh" ]]; then
            local omz_version=""
            if [[ -f "$HOME/.oh-my-zsh/lib/git.zsh" ]]; then
                omz_version=$(grep "OMZ_VERSION" "$HOME/.oh-my-zsh/oh-my-zsh.sh" 2>/dev/null | cut -d'"' -f2 || echo "unknown")
            fi
            print_info "‚ö° Oh My Zsh: ${omz_version:-installed}"
        else
            print_warning "‚ö™ Oh My Zsh n√£o instalado"
        fi
    else
        print_warning "‚ö™ ZSH n√£o instalado"
    fi
}

# Verificar Python
check_python_version() {
    if command_exists python3; then
        local current=$(python3 --version | cut -d' ' -f2)
        print_info "üêç Python: $current"
        
        if command_exists pip3; then
            local pip_version=$(pip3 --version | cut -d' ' -f2)
            print_info "üì¶ pip: $pip_version"
        fi
    else
        print_warning "‚ö™ Python3 n√£o instalado"
    fi
}

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

main() {
    print_module_banner "VERIFICA√á√ÉO DE VERS√ïES" "üîç"
    
    print_step "Verificando vers√µes das ferramentas instaladas"
    
    # Verifica√ß√µes b√°sicas
    check_git_version
    check_shell_tools
    check_node_version
    check_python_version
    check_docker_version
    check_vscode_version
    
    echo ""
    print_step "Verificando ferramentas CLI modernas"
    check_modern_tools
    
    echo ""
    print_info "üí° Para atualizar ferramentas:"
    print_info "   ‚Ä¢ Git: sudo apt update && sudo apt upgrade git"
    print_info "   ‚Ä¢ Node.js: nvm install --lts && nvm use --lts"
    print_info "   ‚Ä¢ Docker: Reinstalar via script oficial"
    print_info "   ‚Ä¢ VS Code: Atualiza√ß√£o autom√°tica ou via apt"
    print_info "   ‚Ä¢ Ferramentas modernas: Reinstalar via scripts oficiais"
    
    print_success "üéâ Verifica√ß√£o de vers√µes conclu√≠da!"
}

# Executar apenas se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi